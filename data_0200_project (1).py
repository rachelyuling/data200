# -*- coding: utf-8 -*-
"""DATA 0200 Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vpEjq70W5_sQ0iDoy452F_o4wlY2KZ5r

# Importing Data
"""

# Importing Data
import gdown
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats
import seaborn as sns


!pip install --upgrade gdown
!gdown --id 1iZLptjm_Gwp6FuO2gnYgO7WIRmvZoBfX
health = pd.read_csv('/content/Conditions_Contributing_to_COVID-19_Deaths__by_State_and_Age__Provisional_2020-2023 (1).csv')

# health.head()

health.head(233)

health['Month'].value_counts()

health.isnull().sum().sum()

# Cleaning Data

clean_health = health[['Group','State','Condition Group','Condition','Age Group','COVID-19 Deaths','Year','Month']]
US_health = clean_health[(clean_health['State'] == 'United States')

# maybe add back state


& (clean_health['Group'] == 'By Month')
& (clean_health['Age Group'] != 'Not stated')
& (clean_health['Age Group'] != 'All Ages')]
print(US_health)
#len(US_health)
# & (clean_health['Age Group'] == 'Not stated')
#US_health.head()

clean_health.isnull().sum().sum()

# Double check that COVID-19 condition is a unique value
COVID_health = US_health[(US_health['Condition']=="COVID-19")]
print(COVID_health["COVID-19 Deaths"].sum())

No_COVID_health = US_health[(US_health['Condition'] !="COVID-19")]
print(No_COVID_health["COVID-19 Deaths"].sum())

# COVID-19 is one of the conditions included in the dataframe, but there was uncertainty
# that value encompassed all deaths caused by COVID-19 or just deaths where COVID-19 was
# the only relevant condition. By summing the total number of deaths caused by COVID-19
# and comparing the number of deaths with all other conditions, we found that (respectively)
# 1146219.0 =/ 3270626.0. This helps us conclude that COVID-19 is a unique condition and that
# this column indicates deaths without comorbidities.

US_health.dtypes
# print(health)

US_health.head()

print(US_health)

US_health.head(50)

US_health['Age Group'].value_counts()

US_health.count()

"""# Scaffold 2

### The following code will help us perform our exploratory data analysis (EDA)!
"""

# Create an additional dataframe with state data but not US data
state_health = clean_health[(clean_health['State'] != 'United States')
  & (clean_health['Group'] == 'By Month')
  & (clean_health['Age Group'] != 'Not stated')
  & (clean_health['Age Group'] != 'All Ages')]

state_health.head(50)

print(state_health)
state_health.isnull().sum().sum()

"""Univariate EDA:"""

### Condition Group

# Return the unique Condition Groups that will serve as our comorbidity groups
US_health['Condition Group'].unique()

# Make a bar graph that shows Conditions Group counts

#plt.figure(figsize=(50,8))

#plt.hist(US_health['Condition Group'], edgecolor='black')
#condition_labels = ["a","b","c","d","e","f","g","h","i","j","k","l"]
#plt.legend(["a","b","c","d","e","f","g","h","i","j","k","l"])

#plt.xticks(size = 8)
#plt.yticks(size = 15)

US_health['Condition Group'].value_counts().plot(kind = 'bar', title = "Condition Group Counts", xlabel = "Condition Groups", ylabel = "Counts")


plt.show()

### Conditions

# Return the unique Conditions in case we want to further aggregate our comorbidity groups
US_health['Condition'].unique()

# US_health['Condition'].value_counts()

# Make a bar graph that shows Conditions counts
US_health['Condition'].value_counts().plot(kind = 'bar', title = "Condition Counts", xlabel = "Condition", ylabel = "Counts")
plt.show()

### Age

# Return the unique Age Groups that we are splitting our data by for analysis
US_health['Age Group'].unique()

# Make a bar graph that show Age Group counts
US_health['Age Group'].value_counts().plot(kind = 'bar', title = "Age Group Counts", xlabel = "Age Group", ylabel = "Counts")
plt.show()

# State
plt.figure(figsize=(30,10))
state_health['State'].value_counts().plot(kind = 'bar', width= 0.5)

#, title = "State Counts", xlabel = "State", ylabel = "Counts"

plt.xlabel('State', size=20)
plt.ylabel('Counts', size=20)
plt.title('State Counts', size=20)


plt.show()

# COVID-19
#US_health.plot(kind = 'pie',  y ='COVID-19 Deaths', labels = US_health['COVID-19 Deaths'], title = 'Total COVID-19 Deaths')
#plt.pie(US_health['COVID-19 Deaths'],labels=US_health['COVID-19 Deaths'], autopct='%1.1f%%')
US_health.groupby(['State'])['COVID-19 Deaths'].sum().plot(kind = 'pie', title = 'Total COVID-19 Deaths', autopct='%1.1f%%', startangle=180)
plt.show()

"""Bivariate EDA:"""

### COVID-19 Deaths

# Use .describe() on COVID-19 Deaths to see the standard descriptive statistics
US_health['COVID-19 Deaths'].describe()

# Make a pie chart that organizes COVID-19 Deaths per year (2020-2023)
US_health.groupby(['Year'])['COVID-19 Deaths'].sum().plot(kind = 'pie', title = 'COVID-19 Deaths Per Year', autopct='%1.1f%%')
plt.show()

# Age & COVID-19 Deaths


#US_health.groupby(['Year']).boxplot(['Age Group'], ['COVID-19 Deaths'])

pivot_US_health = US_health.pivot_table(index='Age Group', columns='Year', values='COVID-19 Deaths', aggfunc='sum')
#pivot_US_health.plot(kind='bar', stacked=True)
pivot_US_health.plot(kind='bar')

plt.xlabel('Age Group', size=10)
plt.ylabel('COVID-19 Deaths', size=10)
plt.title('Age Group vs COVID-19 Deaths')


plt.show()





# Scatterplot pandas
#US_health.groupby(['Year']).plot(x='Age Group', y= 'COVID-19 Deaths', kind='scatter', color='blue')




# Heatmap seaborn
#correlation_matrix = US_health.groupby(['Year']).corr()
#sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
#plt.show()









#Scatter plot matplotlib

#plt.scatter(US_health['Age Group'], US_health['COVID-19 Deaths'])


#plt.xlabel('Age Group')
#plt.ylabel('COVID-19 Deaths')

#plt.title('COVID-19 Deaths by Age Group')

#plt.show()
# COVID-19 Deaths', xlabel = 'Age Group', ylabel = 'COVID-19 Deaths'

# Age and COVID-19 deaths (not separated by year)
pivot_US_health_all = US_health.pivot_table(index='Age Group', values='COVID-19 Deaths', aggfunc='sum')
#pivot_US_health.plot(kind='bar', stacked=True)
pivot_US_health_all.plot(kind='bar')

plt.xlabel('Age Group', size=10)
plt.ylabel('COVID-19 Deaths', size=10)
plt.title('Age Group vs COVID-19 Deaths')


plt.show()

# Condition Group & COVID-19 Deaths
pivot_US_health5 = US_health.pivot_table(index='Condition Group', columns='Year', values='COVID-19 Deaths', aggfunc='sum')
#pivot_US_health.plot(kind='bar', stacked=True)

#plt.figure(figsize=(50,100))

pivot_US_health5.plot(kind='bar', width=0.7,figsize=(15, 8))

#plt.xticks(size = 8)
#plt.yticks(size = 15)

#plt.figure(figsize=(15,8))
#plt.scatter(US_health['Condition Group'], US_health['COVID-19 Deaths'])


plt.xlabel('Condition Group', size=10)
plt.ylabel('COVID-19 Deaths', size=10)
plt.title('Condition Group vs COVID-19 Deaths')

#plt.xticks(size = 10, rotation = 90)
#plt.yticks(size = 12)

#plt.title('COVID-19 Deaths by Condition Group')

plt.show()

# Condition Group and COVID-19 Deaths (not separated by year)

pivot_US_health5_all = US_health.pivot_table(index='Condition Group', values='COVID-19 Deaths', aggfunc='sum')

pivot_US_health5_all.plot(kind='bar', width=0.7,figsize=(15, 8))

plt.xlabel('Condition Group', size=10)
plt.ylabel('COVID-19 Deaths', size=10)
plt.title('Condition Group vs COVID-19 Deaths')
plt.show

# Conditions & COVID-19 Deaths

#plt.figure(figsize=(15,8))
#plt.scatter(US_health['Condition'], US_health['COVID-19 Deaths'])


#plt.xlabel('Condition', size=15)
#plt.ylabel('COVID-19 Deaths', size=15)

#plt.xticks(size = 10, rotation = 90)
#plt.yticks(size = 12)

#plt.title('COVID-19 Deaths by Condition#')

#plt.show()




pivot_US_health2 = US_health.pivot_table(index='Condition', columns='Year', values='COVID-19 Deaths', aggfunc='sum')
#pivot_US_health.plot(kind='bar', stacked=True)

#plt.figure(figsize=(50,100))

pivot_US_health2.plot(kind='bar', width=0.7,figsize=(15, 8))

#plt.xticks(size = 8)
#plt.yticks(size = 15)


plt.xlabel('Condition', size=10)
plt.ylabel('COVID-19 Deaths', size=10)
plt.title('Condition vs COVID-19 Deaths')

plt.show()


#US_health.groupby(['Condition']).plot(['COVID-19 Deaths']

# Conditions and COVID-19 Deaths (not separated by year)

pivot_US_health2_all = US_health.pivot_table(index='Condition', values='COVID-19 Deaths', aggfunc='sum')


pivot_US_health2_all.plot(kind='bar', width=0.7,figsize=(15, 8))


plt.xlabel('Condition', size=10)
plt.ylabel('COVID-19 Deaths', size=10)
plt.title('Condition vs COVID-19 Deaths')

plt.show()

# State and COVID-19 Deaths

pivot_US_health3 = state_health.pivot_table(index='State', columns='Year', values='COVID-19 Deaths', aggfunc='sum')
pivot_US_health3.plot(kind='bar', width=0.7,figsize=(15, 8))


plt.xlabel('State', size=10)
plt.ylabel('COVID-19 Deaths', size=10)
plt.title('State vs COVID-19 Deaths')

plt.show()

# State and COVID-19 Deaths (not separated by year)

pivot_US_health3_all = state_health.pivot_table(index='State', values='COVID-19 Deaths', aggfunc='sum')
pivot_US_health3_all.plot(kind='bar', width=0.7,figsize=(15, 8))


plt.xlabel('State', size=10)
plt.ylabel('COVID-19 Deaths', size=10)
plt.title('State vs COVID-19 Deaths')

plt.show()

# Expanding the data dicitonary! Here we are re-checking our values for the data dictionary after
# going through scaffold 2 and making edits to the dataframe we are using:
US_health['COVID-19 Deaths'].describe()
print(state_health)
US_health['Condition Group'].value_counts()
US_health['Condition'].value_counts()
US_health['Month'].value_counts()

## Downloading CSV files to import for tableau
# from google.colab import drive
# drive.mount('/content/drive')

# US_health.to_csv('/content/drive/My Drive/US_health.csv')

# state_health.to_csv('/content/drive/My Drive/state.csv')

"""# Scaffold 3

"""

from sklearn.preprocessing import LabelEncoder
from sklearn.cluster import KMeans
from scipy.cluster import hierarchy

!pip install kmodes
from kmodes.kmodes import KModes

from kmodes.kprototypes import KPrototypes

print(US_health)

# Create new dataframe called cluster_state_health
# cluster_state_health = state_health.dropna()


# # Check that there are no null values
# cluster_state_health.head(30)
# cluster_state_health.isna().sum().sum()


# # Drop Group column (unnecessary)
# cluster_state_health = cluster_state_health.drop(['Group'], axis = 1)

label_encoder = LabelEncoder()
encoded_ch = US_health.apply(label_encoder.fit_transform)

lm = hierarchy.linkage(encoded_ch,  method='ward')
dn = hierarchy.dendrogram(lm, truncate_mode = 'lastp')

health_array = US_health.values
print(health_array)

kproto = KPrototypes(n_clusters=6, verbose=2,max_iter=20)
clusters = kproto.fit_predict(health_array, categorical=[0, 1, 2, 3, 4])

print(kproto.cluster_centroids_)

cluster_dict=[]
for c in clusters:
    cluster_dict.append(c)

# cluster_dict

US_health['cluster'] = cluster_dict

plt.scatter(US_health['Year'], US_health['Condition Group'], c=US_health['cluster'], s=50, cmap='viridis')

plt.scatter(US_health['Year'], US_health['Age Group'], c=US_health['cluster'], s=50, cmap='viridis')

plt.scatter(US_health['COVID-19 Deaths'], US_health['Condition'], c=US_health['cluster'], s=50, cmap='viridis')

plt.scatter(US_health['COVID-19 Deaths'], US_health['Year'], c=US_health['cluster'], s=50, cmap='viridis')

plt.scatter(US_health['COVID-19 Deaths'], US_health['State'], c=US_health['cluster'], s=50, cmap='viridis')

# Perform a multifactor ANOVA
import statsmodels.api as smapi
import statsmodels.formula.api as smf
import matplotlib.pyplot as plt

anova_health = US_health[['Condition','Age Group','COVID-19 Deaths', 'Year']]
anova_health['Age_Group'] = anova_health['Age Group']
anova_health['COVID_19_Deaths'] = anova_health['COVID-19 Deaths']
anova_health = anova_health[(anova_health['Condition'] != 'COVID-19')]


anova_health = anova_health.drop(columns=['Age Group', 'COVID-19 Deaths'])
print(anova_health)

#anova_health = anova_health.pivot_table(index = 'COVID-19 Deaths', columns=['Condition','Age Group'])

# Testing assumptions
# Homogeneity
anova_health['Log_COVID_19_Deaths']=np.log(anova_health['COVID_19_Deaths'])


anova_health.loc[anova_health['Year'] == 2020.0, 'Year'] = "twenty"
anova_health.loc[anova_health['Year'] == 2021.0, 'Year'] = "twentyone"
anova_health.loc[anova_health['Year'] == 2022.0, 'Year'] = "twentytwo"
anova_health.loc[anova_health['Year'] == 2023.0, 'Year'] = "twentythree"

anova_health.groupby(['Condition', 'Age_Group', 'Year']).std().max()

anova_health.groupby(['Condition', 'Age_Group', 'Year']).std().min()

3.270452/0.482905

# fairly small variance difference so assumption is met

# Testing assumptions
# Normality

from statsmodels.graphics.gofplots import qqplot

grouped_data = [group['Log_COVID_19_Deaths'] for name, group in anova_health.groupby(['Condition', 'Age_Group', 'Year'])]

for i, data in enumerate(grouped_data):
  plt.figure()
  qqplot(data, line='s')
  plt.show()

# transforming log values for ANOVA
anova_health = anova_health.replace([-np.inf],0)

# assign formula variable
formula = 'Log_COVID_19_Deaths ~ C(Condition) * C(Age_Group) * C(Year)'

# run model using formula and anova_df dataframe
model = smf.ols(formula,data=anova_health).fit()

# return model summary
print(model.summary())

# obtain summary of model
smapi.stats.anova_lm(model, typ=3)

sns.set_theme(style="whitegrid")

g = sns.catplot(
    data = anova_health, x ="Age_Group", y ="Log_COVID_19_Deaths",hue="Year", col="Condition",
    capsize=.2, errorbar="se",kind="point"
)
g.despine(left=True)

post_hoc_df = anova_health.copy(deep=True)
post_hoc_df

# Post-hoc Testing
post_hoc_df = anova_health.copy(deep=True)

def condition_name(x):
  condition_type = {'Influenza and pneumonia': 1, 'Chronic lower respiratory diseases': 2,
                    'Adult respiratory distress syndrome': 3, 'Respiratory failure': 4,
                    'Respiratory arrest': 5, 'Other diseases of the respiratory system': 6,
                    'Hypertensive diseases': 7, 'Ischemic heart disease': 8,
                    'Cardiac arrest': 9, 'Cardiac arrhythmia': 10, 'Heart failure': 11,
                    'Cerebrovascular diseases': 12,
                    'Other diseases of the circulatory system': 13, 'Sepsis': 14,
                    'Malignant neoplasms': 15, 'Diabetes': 16, 'Obesity': 17, 'Alzheimer disease': 18,
                    'Vascular and unspecified dementia': 19, 'Renal failure': 20,
                    'Intentional and unintentional injury, poisoning, and other adverse events': 21,
                    'All other conditions and causes (residual)': 22}
  return condition_type.get(x)

def age_name(x):
  age_type = {'0-24': 0.1, '25-34':0.2, '35-44':0.3, '45-54':0.4, '55-64':0.5, '65-74':0.6, '75-84':0.7,
       '85+':0.8}
  return age_type.get(x)

def year_name(x):
  year_type = {'twenty': 0.01, 'twentyone': 0.02, 'twentytwo': 0.03, 'twentythree':0.04}
  return year_type.get(x)

#post_hoc_df['labels'] = post_hoc_df['Condition'] + "+" + post_hoc_df['Age_Group'] + "+" + post_hoc_df['Year']

post_hoc_df['Condition'] = post_hoc_df['Condition'].apply(condition_name)
post_hoc_df['Age_Group'] = post_hoc_df['Age_Group'].apply(age_name)
post_hoc_df['Year'] = post_hoc_df['Year'].apply(year_name)

post_hoc_df['post_hoc'] = post_hoc_df['Condition'] + post_hoc_df['Age_Group'] + post_hoc_df['Year']

post_hoc_df.tail()

import statsmodels.stats.multicomp as mc

comparisons = mc.MultiComparison(post_hoc_df['Log_COVID_19_Deaths'], post_hoc_df['post_hoc'])
post_hoc_result = comparisons.tukeyhsd()

print(post_hoc_result)